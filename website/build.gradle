/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.text.SimpleTemplateEngine
import groovy.text.Template
import groovy.text.TemplateEngine
import java.util.regex.Matcher

// we only need a test source set
apply plugin: 'groovy'
apply plugin: 'code-quality'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: '../gradle/codeQuality.gradle'

remoteLocations = new RemoteLocations()

repositories {
    mavenCentral()
}
configurations {
    ftpAntTask
    integTestCompile { extendsFrom groovy }
}
dependencies {
    ftpAntTask module("org.apache.ant:ant-commons-net:1.7.0") {
        module("commons-net:commons-net:1.4.1") {
            dependencies("oro:oro:2.0.8@jar")
        }
    }
    groovy localGroovy()
    testCompile 'junit:junit:4.7'
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.8'
}

webSrcDir = file('src')

if (!hasProperty('gradleCorePath')) {
    gradleCorePath = projectDir.parentFile
}
File generatedDocs = new File("$gradleCorePath/subprojects/docs/build/websiteDocs")

//buildWebsiteDir = new File(System.getProperty('user.home'), 'Sites/gradle')
buildWebsiteDir = new File(buildDir, 'website')

checkstyleConfigDir = "$gradleCorePath/config/checkstyle"
checkstyleProperties.checkstyleConfigDir = checkstyleConfigDir
checkstyleConfigFileName = "$checkstyleConfigDir/checkstyle.xml"

findbugsConfigDir = "$gradleCorePath/config/findbugs"
findbugsProperties.findbugsConfigDir = findbugsConfigDir
findbugsConfigFileName = "$findbugsConfigDir/findbugs.xml"

codeNarcConfigFileName = "$gradleCorePath/config/codenarc.xml"

task userguideContent << {
    def startParams = gradle.startParameter.newBuild()
    startParams.taskNames = ['websiteDocs']
    startParams.currentDir = gradleCorePath
    def launcher = GradleLauncher.newInstance(startParams)
    launcher.run().rethrowFailure()
}

releases = []
task configureReleases << {
    gradleCoreProperties = GUtil.loadProperties(new File(generatedDocs, 'version.properties'))

    version = gradleCoreProperties.version
    releases << new Release(version: version, status: 'Current Release')
    releases << new Release(version: '0.9.1')
    releases << new Release(version: '0.9')
    releases << new Release(version: '0.8')
}

task html(dependsOn: configureReleases) << {
    buildWebsiteDir.mkdirs()
    File webContentSrcDir = new File(webSrcDir, 'content')
    def engine = new SimpleTemplateEngine()
    def binding = [
            php: new PhpIncludes(phpSrcDir: new File(webSrcDir, 'php')),
            currentRelease: releases[0],
            releases: releases,
            previousReleases: releases.subList(1, releases.size())
    ]
    binding.sidebar = engine.createTemplate(new File(webSrcDir, 'sidebar.html')).make(binding).toString()
    def skeletonTemplate = engine.createTemplate(new File(webSrcDir, 'skeleton.html'))

    List pages = []
    webContentSrcDir.eachFileMatch(~/^.+?\.html$/) { pages << new Page(srcFile: it) }
    generatedDocs.eachFileMatch(~/^.+?\.html$/) {
        if (it.name != 'userguide.html' && it.name != 'website.html') {
            pages << new GeneratedPage(srcFile: it)
        }
    }
    pages << new IndexPage(srcFile: "$webContentSrcDir/index.php" as File)
    pages << new PhpPage(srcFile: "$webContentSrcDir/news.php" as File)
    pages << new PhpPage(srcFile: "$webContentSrcDir/cookbook.php" as File)
    pages.each { Page page ->
        page.destFile = new File(buildWebsiteDir, page.srcFile.name)
        page.engine = engine
        page.pageTemplate = skeletonTemplate
        page.templateBinding = binding
        page.transform()
    }

    copy {
        into buildWebsiteDir
        from(webSrcDir) {
            include 'css/**'
            include 'img/**'
            include 'other-resources/**'
        }
        from(generatedDocs) {
            include 'base.css'
            into 'css'
        }
        from(generatedDocs) {
            include 'img/**'
        }
    }
}

assemble.dependsOn html

// A marker to indicate we are doing a release
task releaseVersion
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(releaseVersion)) {
        remoteLocations.release = true
    }
}

test {
    dependsOn html
    systemProperties 'test.base.uri': buildWebsiteDir.toURI()
    systemProperties 'test.ignore.docs': true
    inputs.dir buildWebsiteDir
}

task uploadWebsite(dependsOn: html, type: Ftp) {
    doFirst {
        ftp(action: 'delete', remotedir: remoteLocations.ftpDir) {
            fileset() {
                include(name: '*.html')
                include(name: '*.php')
            }
        }
        ftp(action: 'send', remotedir: remoteLocations.ftpDir) {
            fileset(dir: buildWebsiteDir)
        }
    }
}

task testRemote(type: Test, dependsOn: uploadWebsite) {
    doFirst {
        systemProperties 'test.base.uri': remoteLocations.websiteUrl
    }
    systemProperties 'test.ignore.docs': false
}

task install(type: Copy) {
    dependsOn html
    from buildWebsiteDir
    into "${System.getProperty('user.home')}/Sites/gradle"
}

task ciBuild(dependsOn: [clean, html, uploadWebsite, testRemote])

task release(dependsOn: [releaseVersion, clean, html, uploadWebsite, testRemote])

tasks.withType(Ftp).allObjects { ftp ->
    ftp.ftpAntClasspath = configurations.ftpAntTask
    ftp.websiteFtpUserName = project.hasProperty('websiteFtpUserName') ? project.websiteFtpUserName : null
    ftp.websiteFtpUserPassword = project.hasProperty('websiteFtpUserPassword') ? project.websiteFtpUserPassword : null
}

class Ftp extends DefaultTask {
    final List ftpActions = []

    def ftp(Map args, Closure cl = {}) {
        ftpActions << [args: args, action: cl]
    }

    @InputFiles
    FileCollection ftpAntClasspath

    @Input
    String websiteFtpUserName

    @Input
    String websiteFtpUserPassword

    @TaskAction
    def executeActions() {
        ant.taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: ftpAntClasspath.asPath)
        ftpActions.each { a ->
            Map ftpArgs = a.args + [
                    server: 'ftp.gradle.org',
                    userid: websiteFtpUserName,
                    password: websiteFtpUserPassword
            ]
            Closure cl = a.action
            cl.delegate = ant
            ant.ftp(ftpArgs) {
                cl()
            }
        }
    }
}

void ftp(Map args, Closure antFileset = {}) {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        Map ftpArgs = args + [
                server: 'ftp.gradle.org',
                userid: websiteFtpUserName,
                password: websiteFtpUserPassword
        ]
        delegate.ftp(ftpArgs) {
            antFileset.delegate = delegate
            antFileset()
        }
    }
}

class Page {
    def File srcFile
    def File destFile
    def Template pageTemplate
    def Map templateBinding
    def TemplateEngine engine

    def transform() {
        destFile.text = text
    }

    def getTitle() {
        def content = srcFile.text
        def matcher = content =~ /<h1.*>([^<]+)<\/h1>/
        if (!matcher) {
            throw new GradleException("Could not find title in $srcFile.name.")
        }
        def title = matcher[0][1].trim()
        title
    }

    def getContent() {
        try {
            def contentTemplate = engine.createTemplate(srcFile.text)
            contentTemplate.make(templateBinding).toString()
        } catch (Exception e) {
            throw new GradleException("Could not generate output file for '${srcFile.name}.", e)
        }
    }

    def getText() {
        pageTemplate.make(templateBinding + [fileName: srcFile.name, content: content, title: title]).toString()
    }
}

class PhpPage extends Page {

    def String getText() {
        File webPhpSrcDir = new File(srcFile.parentFile.parentFile, 'php')
        String prefix = srcFile.name.replace('.php', 'Php')
        File prefixFile = new File(webPhpSrcDir, "${prefix}Header.php")
        String text = super.getText()
        return prefixFile.file ? prefixFile.text + text : text
    }
}

class IndexPage extends PhpPage {
    def Object getTitle() {
        'Home'
    }
}

class GeneratedPage extends Page {
    def String getContent() {
        srcFile.text
    }
}

class PhpIncludes {
    def File phpSrcDir

    def propertyMissing(String name) {
        File srcFile = new File(phpSrcDir, "${name}.php")
        if (!srcFile.file) {
            throw new MissingPropertyException(name, PhpIncludes.class)
        }
        srcFile.text
    }
}

class Release {
    def String title
    def String status
    def String version

    def String getMajorVersion() {
        Matcher matcher = version =~ /(\d+\.\d+).*/
        matcher.matches()
        return matcher.group(1)
    }

    def String getReleaseNoteVersion() {
        Matcher matcher = version =~ /(\d+(\.\d+)+).*/
        matcher.matches()
        return matcher.group(1)
    }

    def String getDisplayName() {
        return status ? "Gradle $version ($status)" : "Gradle $version"
    }

    def String getAllDistributionUrl() {
        return "${distributionBase}gradle-${version}-all.zip"
    }

    def String getBinDistributionUrl() {
        return "${distributionBase}gradle-${version}-bin.zip"
    }

    def String getSrcDistributionUrl() {
        return "${distributionBase}gradle-${version}-src.zip"
    }

    def String getDistributionBase() {
        def version = majorVersion as BigDecimal
        if (version >= 0.9) {
            return "http://gradle.artifactoryonline.com/gradle/distributions/"
        } else {
            return "http://dist.codehaus.org/gradle/"
        }
    }

    def String getDocsUrl() {
        return "/${version}/docs"
    }

    def String getReleaseNotesUrl() {
        return "http://docs.codehaus.org/display/GRADLE/Gradle+${releaseNoteVersion}+Release+Notes"
    }

    def String getUserGuideHtmlUrl() {
        return "${docsUrl}/userguide/userguide.html"
    }

    def String getUserGuideSingleHtmlUrl() {
        return "${docsUrl}/userguide/userguide_single.html"
    }

    def String getUserGuidePdfUrl() {
        return "${docsUrl}/userguide/userguide.pdf"
    }

    def boolean getHasDsldoc() {
        def version = majorVersion as BigDecimal
        return version >= 0.9
    }

    def String getDsldocUrl() {
        return "${docsUrl}/dsl/index.html"
    }

    def String getJavadocUrl() {
        return "${docsUrl}/javadoc/index.html"
    }

    def String getGroovydocUrl() {
        return "${docsUrl}/groovydoc/index.html"
    }
}

class RemoteLocations {
    boolean release

    String getWebsiteUrl() {
        return release ? 'http://www.gradle.org/' : 'http://www.gradle.org/latest/'
    }

    String getFtpDir() {
        return release ? '.' : 'latest'
    }
}